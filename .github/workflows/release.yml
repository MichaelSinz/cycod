name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'  # Matches version tags like 1.0.0, 1.0.0-20250330, 1.0.0-alpha-20250330.1
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g. 1.0.0, 1.0.0-20250330, 1.0.0-alpha-20250330.1)'
        required: true
        type: string

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: production # Adds protection and approval requirements
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper version determination
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Determine version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Extract version from tag (remove leading 'v' if present)
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in project file
      run: |
        # Keep original version for Version and InformationalVersion (supports SemVer with pre-release tags)
        sed -i "s/<Version>.*<\/Version>/<Version>${{ env.VERSION }}<\/Version>/" src/chatx.csproj
        sed -i "s/<InformationalVersion>.*<\/InformationalVersion>/<InformationalVersion>${{ env.VERSION }}<\/InformationalVersion>/" src/chatx.csproj
        
        # Convert version to numeric format for AssemblyVersion and FileVersion
        # Replace any non-numeric sections with dots to create a valid numeric version
        NUMERIC_VERSION=$(echo ${{ env.VERSION }} | sed -E 's/[^0-9]+/./g' | sed -E 's/\.+/./g' | sed -E 's/^\.//g' | sed -E 's/\.$//g')
        echo "NUMERIC_VERSION=$NUMERIC_VERSION" >> $GITHUB_ENV
        
        # If we don't have 4 parts (major.minor.build.revision), add zeros to make it 4 parts
        VERSION_PARTS=$(echo $NUMERIC_VERSION | tr '.' '\n' | wc -l)
        if [ $VERSION_PARTS -eq 1 ]; then
          NUMERIC_VERSION="$NUMERIC_VERSION.0.0.0"
        elif [ $VERSION_PARTS -eq 2 ]; then
          NUMERIC_VERSION="$NUMERIC_VERSION.0.0"
        elif [ $VERSION_PARTS -eq 3 ]; then
          NUMERIC_VERSION="$NUMERIC_VERSION.0"
        elif [ $VERSION_PARTS -gt 4 ]; then
          # If more than 4 parts, only keep the first 4
          NUMERIC_VERSION=$(echo $NUMERIC_VERSION | awk -F'.' '{print $1"."$2"."$3"."$4}')
        fi
        
        echo "Using numeric version: $NUMERIC_VERSION for AssemblyVersion and FileVersion"
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>$NUMERIC_VERSION<\/AssemblyVersion>/" src/chatx.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>$NUMERIC_VERSION<\/FileVersion>/" src/chatx.csproj
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --configuration Release --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()  # Upload test results even if tests fail
      with:
        name: test-results
        path: ./TestResults/*.trx
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()  # Run this step even if previous steps failed
      with:
        name: .NET Tests
        path: ./TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: false
    
    - name: Pack
      run: |
        # Publish for multiple platforms first
        dotnet publish src/chatx.csproj -c Release -r win-x64
        dotnet publish src/chatx.csproj -c Release -r linux-x64
        dotnet publish src/chatx.csproj -c Release -r osx-x64
        
        # Then pack the NuGet package (will include all published runtimes)
        dotnet pack src/chatx.csproj --configuration Release --no-build -o nuget-packages
    
    - name: Generate package checksums
      run: |
        cd nuget-packages
        for f in *.nupkg; do
          sha256sum "$f" > "${f}.sha256"
        done
        cd ..
    
    - name: Upload NuGet package and checksums
      uses: actions/upload-artifact@v4
      with:
        name: chatx-nuget-package
        path: nuget-packages/*
    
    - name: Publish to NuGet
      if: ${{ env.NUGET_API_KEY != '' }}
      run: dotnet nuget push "nuget-packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}