name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+-*'  # Matches version tags like 1.0.0-20250330
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (format: X.Y.Z-YYYYMMDD)'
        required: true
        type: string

# Limit permissions to minimum required
permissions:
  contents: read
  packages: write # Required if publishing to GitHub Packages

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: production # Adds protection and approval requirements
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for proper version determination
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x
    
    - name: Determine version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Extract version from tag (remove leading 'v' if present)
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "::set-output name=version::$VERSION"
    
    - name: Update version in project file
      run: |
        sed -i "s/<Version>.*<\/Version>/<Version>${{ env.VERSION }}<\/Version>/" src/chatx.csproj
        sed -i "s/<AssemblyVersion>.*<\/AssemblyVersion>/<AssemblyVersion>${{ env.VERSION }}<\/AssemblyVersion>/" src/chatx.csproj
        sed -i "s/<FileVersion>.*<\/FileVersion>/<FileVersion>${{ env.VERSION }}<\/FileVersion>/" src/chatx.csproj
        sed -i "s/<InformationalVersion>.*<\/InformationalVersion>/<InformationalVersion>${{ env.VERSION }}<\/InformationalVersion>/" src/chatx.csproj
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --configuration Release --no-restore
    
    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()  # Upload test results even if tests fail
      with:
        name: test-results
        path: ./TestResults
    
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()  # Run this step even if previous steps failed
      with:
        name: .NET Tests
        path: ./TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true
    
    - name: Pack
      run: |
        # Publish for multiple platforms first
        dotnet publish src/chatx.csproj -c Release -r win-x64 --no-build
        dotnet publish src/chatx.csproj -c Release -r linux-x64 --no-build
        dotnet publish src/chatx.csproj -c Release -r osx-x64 --no-build
        
        # Then pack the NuGet package (will include all published runtimes)
        dotnet pack src/chatx.csproj --configuration Release --no-build -o nuget-packages
    
    - name: Generate package checksums
      run: |
        cd nuget-packages
        for f in *.nupkg; do
          sha256sum "$f" > "${f}.sha256"
        done
        cd ..
    
    - name: Upload NuGet package and checksums
      uses: actions/upload-artifact@v3
      with:
        name: chatx-nuget-package
        path: nuget-packages/*
    
    - name: Publish to NuGet
      if: ${{ env.NUGET_API_KEY != '' }}
      run: dotnet nuget push "nuget-packages/*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}